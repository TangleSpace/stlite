{"version":3,"sources":["../../../streamlit/frontend/src/components/elements/ImageList/ImageList.tsx","../../../streamlit/frontend/src/components/elements/ImageList/styled-components.ts"],"names":["WidthBehavior","StyledImageList","display","flexDirection","flexWrap","rowGap","theme","spacing","lg","StyledImageContainer","alignItems","width","flexGrow","StyledCaption","fontFamily","genericFonts","bodyFont","fontSize","fontSizes","sm","color","colors","fadedText60","textAlign","marginTop","xs","wordWrap","padding","withFullScreenWrapper","containerWidth","isFullScreen","element","height","protoWidth","OriginalWidth","AutoWidth","undefined","ColumnWidth","Error","imgStyle","maxHeight","maxWidth","style","imgs","map","iimage","idx","image","data-testid","markup","ReactHtmlParser","xssSanitizeSvg","src","buildMediaUri","url","alt","toString","caption"],"mappings":";yLAuCKA,E,6CCpBQC,EAAkB,wCAAW,kBAAgB,CACxDC,QAAS,OACTC,cAAe,MACfC,SAAU,OAEVC,OALwC,EAAGC,MAK7BC,QAAQC,MALO,IAQlBC,EAAuB,wCAAW,cAAGH,MAAH,MAAgB,CAC7DJ,QAAS,OACTC,cAAe,SACfO,WAAY,UACZC,MAAO,OACPC,SAAU,KALwB,IAQvBC,EAAgB,wCAAW,gBAAGP,EAAH,EAAGA,MAAH,MAAgB,CACtDQ,WAAYR,EAAMS,aAAaC,SAC/BC,SAAUX,EAAMY,UAAUC,GAC1BC,MAAOd,EAAMe,OAAOC,YACpBC,UAAW,SACXC,UAAWlB,EAAMC,QAAQkB,GACzBC,SAAU,aACVC,QAAS,cAPkB,I,iBDIxB3B,O,kCAAAA,I,8BAAAA,I,2BAAAA,M,KAgFU4B,mBAvER,YAK2B,IAG5BC,EAPJlB,EAI+B,EAJ/BA,MACAmB,EAG+B,EAH/BA,aACAC,EAE+B,EAF/BA,QACAC,EAC+B,EAD/BA,OAKMC,EAAaF,EAAQpB,MAE3B,GACEsB,IAAejC,EAAckC,eAC7BD,IAAejC,EAAcmC,UAG7BN,OAAiBO,OACZ,GAAIH,IAAejC,EAAcqC,YAEtCR,EAAiBlB,MACZ,MAAIsB,EAAa,GAItB,MAAMK,MAAM,wBAAD,OAAyBL,IAFpCJ,EAAiBI,EAKnB,IAAMM,EAAgB,GActB,OAZIP,GAAUF,GACZS,EAASC,UAAYR,EACrBO,EAAS,cAAgB,YAEzBA,EAAS5B,MAAQkB,EAEbI,IAAejC,EAAcmC,YAE/BI,EAASE,SAAW,SAKtB,cAACxC,EAAD,CAAiByC,MAAO,CAAE/B,SAA1B,SACGoB,EAAQY,KAAKC,KACZ,SAACC,EAAgBC,GACf,IAAMC,EAAQF,EACd,OACE,eAACpC,EAAD,CAAgCuC,cAAY,UAA5C,UACGD,EAAME,OAELC,IAAgBC,YAAeJ,EAAME,SAErC,qBACEP,MAAOH,EACPa,IAAKC,YAAcN,EAAMO,KACzBC,IAAKT,EAAIU,aAGZT,EAAMU,SACL,cAAC5C,EAAD,CAAemC,cAAY,UAAUN,MAAOH,EAA5C,oBACOQ,EAAMU,QADb,SAZuBX","file":"static/js/26.d9d487f2.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport ReactHtmlParser from \"react-html-parser\"\nimport withFullScreenWrapper from \"src/hocs/withFullScreenWrapper\"\nimport { buildMediaUri, xssSanitizeSvg } from \"src/lib/UriUtil\"\nimport {\n  IImage,\n  Image as ImageProto,\n  ImageList as ImageListProto,\n} from \"src/autogen/proto\"\nimport {\n  StyledCaption,\n  StyledImageContainer,\n  StyledImageList,\n} from \"./styled-components\"\n\nexport interface ImageListProps {\n  width: number\n  isFullScreen: boolean\n  element: ImageListProto\n  height?: number\n}\n\nenum WidthBehavior {\n  OriginalWidth = -1,\n  ColumnWidth = -2,\n  AutoWidth = -3,\n}\n\n/**\n * Functional element for a horizontal list of images.\n */\nexport function ImageList({\n  width,\n  isFullScreen,\n  element,\n  height,\n}: ImageListProps): ReactElement {\n  // The width field in the proto sets the image width, but has special\n  // cases for -1, -2, and -3.\n  let containerWidth: number | undefined\n  const protoWidth = element.width\n\n  if (\n    protoWidth === WidthBehavior.OriginalWidth ||\n    protoWidth === WidthBehavior.AutoWidth\n  ) {\n    // Use the original image width.\n    containerWidth = undefined\n  } else if (protoWidth === WidthBehavior.ColumnWidth) {\n    // Use the column width\n    containerWidth = width\n  } else if (protoWidth > 0) {\n    // Set the image width explicitly.\n    containerWidth = protoWidth\n  } else {\n    throw Error(`Invalid image width: ${protoWidth}`)\n  }\n\n  const imgStyle: any = {}\n\n  if (height && isFullScreen) {\n    imgStyle.maxHeight = height\n    imgStyle[\"object-fit\"] = \"contain\"\n  } else {\n    imgStyle.width = containerWidth\n\n    if (protoWidth === WidthBehavior.AutoWidth) {\n      // Cap the image width, so it doesn't exceed the column width\n      imgStyle.maxWidth = \"100%\"\n    }\n  }\n\n  return (\n    <StyledImageList style={{ width }}>\n      {element.imgs.map(\n        (iimage: IImage, idx: number): ReactElement => {\n          const image = iimage as ImageProto\n          return (\n            <StyledImageContainer key={idx} data-testid=\"stImage\">\n              {image.markup ? (\n                // SVGs are received unsanitized\n                ReactHtmlParser(xssSanitizeSvg(image.markup))\n              ) : (\n                <img\n                  style={imgStyle}\n                  src={buildMediaUri(image.url)}\n                  alt={idx.toString()}\n                />\n              )}\n              {image.caption && (\n                <StyledCaption data-testid=\"caption\" style={imgStyle}>\n                  {` ${image.caption} `}\n                </StyledCaption>\n              )}\n            </StyledImageContainer>\n          )\n        }\n      )}\n    </StyledImageList>\n  )\n}\n\nexport default withFullScreenWrapper(ImageList)\n","/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledImageList = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  // Not supported in Safari, but at least it's not a regression for those users:\n  rowGap: theme.spacing.lg,\n}))\n\nexport const StyledImageContainer = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"stretch\",\n  width: \"auto\",\n  flexGrow: 0,\n}))\n\nexport const StyledCaption = styled.div(({ theme }) => ({\n  fontFamily: theme.genericFonts.bodyFont,\n  fontSize: theme.fontSizes.sm,\n  color: theme.colors.fadedText60,\n  textAlign: \"center\",\n  marginTop: theme.spacing.xs,\n  wordWrap: \"break-word\",\n  padding: \"0.125rem\",\n}))\n"],"sourceRoot":""}