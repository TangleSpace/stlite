{"version":3,"sources":["../../../streamlit/frontend/src/components/elements/Video/Video.tsx"],"names":["Video","element","width","videoRef","useRef","type","url","useEffect","videoNode","current","setStartTime","currentTime","startTime","addEventListener","removeEventListener","VideoProto","Type","YOUTUBE_IFRAME","height","title","src","getYoutubeSrc","frameBorder","allow","allowFullScreen","ref","controls","buildMediaUri","className","style"],"mappings":";8LA0Be,SAASA,EAAT,GAA8D,IAA7CC,EAA4C,EAA5CA,QAASC,EAAmC,EAAnCA,MACjCC,EAAWC,iBAAyB,MAIlCC,EAAcJ,EAAdI,KAAMC,EAAQL,EAARK,IAEdC,qBAAU,WACR,IAAMC,EAAYL,EAASM,QAErBC,EAA2B,WAC3BF,IACFA,EAAUG,YAAcV,EAAQW,YAQpC,OAJIJ,GACFA,EAAUK,iBAAiB,iBAAkBH,GAGxC,WACDF,GACFA,EAAUM,oBAAoB,iBAAkBJ,MAGnD,CAACT,IAaJ,GAAII,IAASU,IAAWC,KAAKC,eAAgB,CAC3C,IAAMC,EAAiB,IAARhB,EAEf,OACE,wBACEiB,MAAOb,EACPc,IAjBgB,SAACd,GAAyB,IACtCM,EAAcX,EAAdW,UACR,OAAIA,EACI,GAAN,OAAUN,EAAV,kBAAuBM,GAElBN,EAYEe,CAAcf,GACnBJ,MAAOA,EACPgB,OAAQA,EACRI,YAAY,IACZC,MAAM,4BACNC,iBAAe,IAKrB,OACE,uBACEC,IAAKtB,EACLuB,UAAQ,EACRN,IAAKO,YAAcrB,GACnBsB,UAAU,UACVC,MAAO,CAAE3B","file":"static/js/35.d50ea286.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2018-2022 Streamlit Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *    http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useEffect, useRef } from \"react\"\nimport { Video as VideoProto } from \"src/autogen/proto\"\nimport { buildMediaUri } from \"src/lib/UriUtil\"\n\nexport interface VideoProps {\n  width: number\n  element: VideoProto\n}\n\nexport default function Video({ element, width }: VideoProps): ReactElement {\n  const videoRef = useRef<HTMLVideoElement>(null)\n\n  /* Element may contain \"url\" or \"data\" property. */\n\n  const { type, url } = element\n\n  useEffect(() => {\n    const videoNode = videoRef.current\n\n    const setStartTime: () => void = () => {\n      if (videoNode) {\n        videoNode.currentTime = element.startTime\n      }\n    }\n\n    if (videoNode) {\n      videoNode.addEventListener(\"loadedmetadata\", setStartTime)\n    }\n\n    return () => {\n      if (videoNode) {\n        videoNode.removeEventListener(\"loadedmetadata\", setStartTime)\n      }\n    }\n  }, [element])\n\n  const getYoutubeSrc = (url: string): string => {\n    const { startTime } = element\n    if (startTime) {\n      return `${url}?start=${startTime}`\n    }\n    return url\n  }\n\n  /* Is this a YouTube link? If so we need a fancier tag.\n       NOTE: This part assumes the URL is already an \"embed\" link.\n    */\n  if (type === VideoProto.Type.YOUTUBE_IFRAME) {\n    const height = width * 0.75\n\n    return (\n      <iframe\n        title={url}\n        src={getYoutubeSrc(url)}\n        width={width}\n        height={height}\n        frameBorder=\"0\"\n        allow=\"autoplay; encrypted-media\"\n        allowFullScreen\n      />\n    )\n  }\n\n  return (\n    <video\n      ref={videoRef}\n      controls\n      src={buildMediaUri(url)}\n      className=\"stVideo\"\n      style={{ width }}\n    />\n  )\n}\n"],"sourceRoot":""}